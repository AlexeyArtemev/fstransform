###############################################################################
###############################################################################
###############################################################################
#########                                                             #########
#########             THIS DOCUMENT EXPLAINS HOW TO USE               #########
#########               RISKY PROGRAMS AND PROCEDURES                 #########
#########        THAT MAY COMPLETELY AND IRREVERSIBLY DELETE          #########
#########                ALL THE DATA ON YOUR DISKS                   #########
#########                                                             #########
#########                                                             #########
#########         THE AUTHOR DECLINES ALL RESPONSIBILITIES            #########
#########               FOR ANY DAMAGE THAT MAY DERIVE                #########
#########           FROM USING THE PROGRAMS AND PROCEDURES            #########
#########               DESCRIBED IN THIS DOCUMENT                    #########
#########                                                             #########
#########                                                             #########
#########                   IF YOU CANNOT COMPLY                      #########
#########      WITH THE TERMS AND DISCLAIMERS STATED ABOVE,           #########
#########                 PLEASE STOP READING NOW                     #########
#########    AND DO NOT TRY TO USE THE PROGRAMS AND PROCEDURES        #########
#########               EXPLAINED IN THIS DOCUMENT                    #########
#########                                                             #########
#########                                                             #########
#########                  IF YOU KEEP READING,                       #########
#########       YOU MUST UNDERSTAND AND ACCEPT ALL THE RISKS          #########
#########                   BEFORE PROCEEDING                         #########
#########                                                             #########
###############################################################################
###############################################################################
###############################################################################

This document explains how use the script 'fstransform.sh'
to transform the contents of a Linux device - usually a disk partition -
from a filesystem type to another.

For example, a disk partition can be transformed from 'jfs' to 'ext4',
or from 'ext2' to 'xfs', or many other combinations.

Currently, the script has been tested on the following filesystems
both as source and as target:
minix, ext2, ext3, ext4, reiserfs, jfs, xfs.

Do NOT use the script with other filesystems unless you are willing to LOSE your data.


Common sense and experience tell that you should ALWAYS have a backup
of your valuable data.

The script is intended for those cases where such backup is either already done,
or is not feasible or unnecessary, typically because the data is not valuable.

There is ALWAYS a possibility that the script will irreversibly delete
ALL the data on the device you run it on, even if you use
a tested combination of filesystems.

All this foreword means only one thing:

      IF YOU LOSE YOUR DATA, IT IS YOUR PROBLEM.

The author declines ALL responsibilities for ANY damage that may derive
from using the programs and procedures described in this document.

No matter how unpleasant is for you to read the statements above,
they are necessary to clarify the point, and also to protect you and the author
from problems, because transforming a device from one filesystem to another
WITHOUT backup is a RISKY procedure.

If you are still reading, you MUST understand and accept all the RISKS
BEFORE actually using the procedures described here.

###############################################################################
###############################################################################
###############################################################################

Enough legalese... now let's get to the technical part.  

The script 'fstransform.sh' does the following:

it takes a device with a filesystem on it (even if almost full)
and transforms the device to a different filesystem type,
in-place (i.e. without backup) and non-destructively
(i.e. it preserves all your data).

It works even if the filesystem is almost full
- several empyrical tests have succeeded even with a 95% full filesystem -
and even if it contains very large files, for example if some files
are larger than half the device or larger than the available space.

There are four requirements for the script to have a chance to succeed:

1) the device must have a little free space, typically at least 5% 

2) the filesystem on the device must support SPARSE FILES, i.e. files with holes
   (see for example http://en.wikipedia.org/wiki/Sparse_file for an explanation of what they are)
   and at least one of the two system calls "ioctl(FIEMAP)" or "ioctl(FIBMAP)"
   (see the file Documentation/filesystems/fiemap.txt in any recent Linux kernel
   for an explanation, or search for the same file on Internet)

3) the initial and final filesystems must be supported by the Linux kernel
   (i.e. it must be able to mount them)
   and by the tools 'mkfs' and 'fsck'
   (i.e. it must be possible to create them and check them for errors)

4) the following programs must be available:
   the two custom-made programs 'fsmove' and 'fsremap' (distributed with the script)
   and several common Linux tools:
      which, expr, id, blockdev, losetup, mount, umount,
      mkdir, rmdir, rm, mkfifo, dd, sync, fsck, mkfs 


FOREWORD:

If the original device is almost full, the tool 'fsremap'
will create a relatively small backup file ("secondary storage")
in your $HOME directory.
This secondary storage file will be at most as large as half your free RAM.

You can pass the option '-s <size>[k|M|G|T|P|E|Y|Z]' to the tool 'fsremap'
in order manually set the secondary storage size,
but please understand that using a too small secondary storage
can slow down the procedure.

To pass the same option to 'fstransform.sh', you must execute something like
  fstransform.sh --opts-fsremap='-s <size>' <other-options-and-arguments> 


PROCEDURE:

0) compile fsmove and fsremap.
   Running "make" should suffice on any recent Linux machine,
   as long as g++ is installed.
   
   You will get two executables, fsmove and fsremap.
   They will be located at
     fstransform-{version}-src/fsmove/Release/fsmove
   and
     fstransform-{version}-src/fsremap/Release/fsmap
   
   You are suggested to either run "make install" or to copy them to a simpler path.
   Below, they will be referred as {fsmove} and {fsremap}


1) mount read-write the device you want to remap to a different file-system

   mount {device} {device-mount-point} [your-options]

   if the device is already mounted, check that it is mounted read-write
   and that no process is using it.

2) decide the target filesystem type.

   For some combinations of the initial and final filesystems
   it is not necessary to use 'fstransform.sh',
   as the same result can be obtained with much simpler - and SAFE - tools.

   For example, an 'ext2' or 'ext3' filesystem can be transformed into 'ext3' or 'ext4'
   using the program 'tune2fs'.
   
   Explaining how to use 'tune2fs' is beyond the scope of this document,
   just read its man-page or search on the Internet for one of
   "convert Linux File System ext2 to ext3" 
   "convert Linux File System ext2 to ext3" 
   "convert Linux File System ext3 to ext4" 
   
   But for most combinations, the only way is either to do a full backup + format +
   restore the data, or use 'fstransform.sh'

3) execute the script

   fstransform.sh {device} {target-file-system-type}

4) follow the instructions - the script will tell you what it is doing
   and 'fsremap' also shows progress percentage and estimated time left.
   
   In case there are errors, you can even try to fix them instead of aborting the script
   
5) be PATIENT. Transforming a large device takes a LONG time...
   For example, transforming a 250GB device from jfs to ext4 took 4 hours
   on the author's computer, which has hard disks capable of reading or writing
   slightly more than 100MB per second: at the time of writing this document
   they are considered fairly fast, at least among hard disks
   - solid state disks (SSD) can be MUCH faster, especially on non-sequential operations

6) if something goes really wrong, check in $HOME/.fstransform and $HOME/.fsremap
   for the log-files produced by the script: they are absolutely necessary
   if you want someone to analyze the problem
   - but in most cases you can forget about recovering your data... 


Good luck!
